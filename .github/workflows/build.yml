name: Build Iris

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: List directory structure (debug)
      run: |
        echo "📁 Root directory contents:"
        ls -la
        echo ""
        echo "📁 Checking for gradle files:"
        find . -name "*.gradle*" -o -name "gradlew*"
        
    - name: Build Iris with Gradle
      run: |
        echo "🔨 Building Iris..."
        ./gradlew iris --info --stacktrace
        
    - name: List build outputs (debug)
      run: |
        echo "📁 Looking for build directories:"
        find . -type d -name "build" 2>/dev/null || echo "No build directories found"
        echo ""
        echo "📁 Looking for JAR files anywhere:"
        find . -name "*.jar" -type f 2>/dev/null || echo "No JAR files found"
        echo ""
        echo "📁 Full directory structure:"
        find . -type f -name "*.jar" -exec ls -la {} \; 2>/dev/null || echo "No JAR files to list"
      
    - name: Find built JAR
      id: find_jar
      run: |
        echo "🔍 Searching for Iris JAR files..."
        
        # Tenta diferentes localizações possíveis
        JAR_PATH=""
        
        # Localização 1: Iris/build (como mencionado na documentação)
        if [ -d "Iris/build" ]; then
          JAR_PATH=$(find Iris/build -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 2: build/libs (padrão do Gradle)
        if [ -z "$JAR_PATH" ] && [ -d "build/libs" ]; then
          JAR_PATH=$(find build/libs -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 3: qualquer diretório build
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -path "*/build/*" -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 4: busca geral por qualquer JAR com Iris no nome
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -name "*[Ii]ris*.jar" -type f | head -1)
        fi
        
        # Localização 5: qualquer JAR no projeto
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -name "*.jar" -type f | head -1)
          echo "⚠️ Using any available JAR: $JAR_PATH"
        fi
        
        if [ -z "$JAR_PATH" ]; then
          echo "❌ JAR file not found in any expected location!"
          echo "Build may have failed. Check the build logs above."
          exit 1
        fi
        
        echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $JAR_PATH)" >> $GITHUB_OUTPUT
        echo "✅ Found JAR: $JAR_PATH"
        
    - name: Upload Iris JAR as artifact
      uses: actions/upload-artifact@v4
      with:
        name: iris-build-${{ github.run_number }}
        path: ${{ steps.find_jar.outputs.jar_path }}
        retention-days: 30

  # Job opcional para releases automáticos em tags
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build Iris
      run: |
        echo "🔨 Building Iris..."
        ./gradlew iris --info --stacktrace
        
    - name: Find built JAR
      id: find_jar
      run: |
        echo "🔍 Searching for Iris JAR files..."
        
        # Tenta diferentes localizações possíveis
        JAR_PATH=""
        
        # Localização 1: Iris/build (como mencionado na documentação)
        if [ -d "Iris/build" ]; then
          JAR_PATH=$(find Iris/build -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 2: build/libs (padrão do Gradle)
        if [ -z "$JAR_PATH" ] && [ -d "build/libs" ]; then
          JAR_PATH=$(find build/libs -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 3: qualquer diretório build
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -path "*/build/*" -name "Iris-*.jar" -type f | head -1)
        fi
        
        # Localização 4: busca geral por qualquer JAR com Iris no nome
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -name "*[Ii]ris*.jar" -type f | head -1)
        fi
        
        # Localização 5: qualquer JAR no projeto
        if [ -z "$JAR_PATH" ]; then
          JAR_PATH=$(find . -name "*.jar" -type f | head -1)
          echo "⚠️ Using any available JAR: $JAR_PATH"
        fi
        
        if [ -z "$JAR_PATH" ]; then
          echo "❌ JAR file not found in any expected location!"
          echo "Build may have failed. Check the build logs above."
          exit 1
        fi
        
        echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
        echo "jar_name=$(basename $JAR_PATH)" >> $GITHUB_OUTPUT
        echo "✅ Found JAR: $JAR_PATH"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_jar.outputs.jar_path }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
